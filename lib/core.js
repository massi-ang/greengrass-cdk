"use strict";
/*
 *  Copyright 2020 Amazon.com or its affiliates
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Core = void 0;
const cdk = require("@aws-cdk/core");
class Core extends cdk.Resource {
    constructor(scope, id, props) {
        super(scope, id);
        this.thing = props.thing;
        this.certificateArn = props.certificateArn;
        this.syncShadow = props.syncShadow;
    }
    resolve() {
        return {
            certificateArn: this.certificateArn,
            syncShadow: this.syncShadow,
            thingArn: this.stack.formatArn({
                service: 'iot',
                resource: 'thing',
                resourceName: this.thing.thingName
            }),
            id: '0'
        };
    }
}
exports.Core = Core;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7OztHQWNHOzs7QUFFSCxxQ0FBcUM7QUF3Q3JDLE1BQWEsSUFBSyxTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBS2xDLFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBZ0I7UUFDMUQsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUE7UUFDeEIsSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUMsY0FBYyxDQUFBO1FBQzFDLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQTtJQUN0QyxDQUFDO0lBRUQsT0FBTztRQUNILE9BQU87WUFDSCxjQUFjLEVBQUUsSUFBSSxDQUFDLGNBQWM7WUFDbkMsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVO1lBQzNCLFFBQVEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQztnQkFDM0IsT0FBTyxFQUFFLEtBQUs7Z0JBQ2QsUUFBUSxFQUFFLE9BQU87Z0JBQ2pCLFlBQVksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVM7YUFDckMsQ0FBQztZQUNGLEVBQUUsRUFBRSxHQUFHO1NBQ1YsQ0FBQTtJQUNMLENBQUM7Q0FFSjtBQXpCRCxvQkF5QkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBcbiAqICBDb3B5cmlnaHQgMjAyMCBBbWF6b24uY29tIG9yIGl0cyBhZmZpbGlhdGVzXG4gKiAgXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKiAgXG4gKiAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKiAgXG4gKiAgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqICBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0ICogYXMgY2RrIGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xuaW1wb3J0IHsgQ2ZuVGhpbmcgfSBmcm9tICdAYXdzLWNkay9hd3MtaW90J1xuaW1wb3J0ICogYXMgZ2cgZnJvbSAnQGF3cy1jZGsvYXdzLWdyZWVuZ3Jhc3MnXG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNvcmUge1xuICAgIC8qKlxuICAgICAqIFRoZSB0aGluZyBhY3RpbmcgYXMgY29yZVxuICAgICAqL1xuICAgIHJlYWRvbmx5IHRoaW5nOiBDZm5UaGluZyxcblxuICAgIC8qKlxuICAgICAqIEVuYWJsZXMvZGlzYWJsZXMgc3luY2hpbmcgb2YgdGhlIFRoaW5nU2hhZG93IGxvY2FsbHlcbiAgICAgKi9cblxuICAgIHN5bmNTaGFkb3c6IGJvb2xlYW4sXG5cbiAgICAvKipcbiAgICAgKiBPbmUgb2YgdGhlIGNlcnRpZmljYXRlcyBhc3NvY2lhdGVkIHdpdGggdGhlIHRoaW5nIHRvIGF1dGhlbnRpY2F0ZSB0byB0aGUgY2xvdWRcbiAgICAgKi9cbiAgICByZWFkb25seSBjZXJ0aWZpY2F0ZUFybjogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29yZVByb3BzIHtcbiAgICAvKipcbiAgICAgKiBUaGUgdGhpbmcgYWN0aW5nIGFzIGNvcmVcbiAgICAgKi9cbiAgICByZWFkb25seSB0aGluZzogQ2ZuVGhpbmcsXG5cbiAgICAvKipcbiAgICAgKiBFbmFibGVzL2Rpc2FibGVzIHN5bmNoaW5nIG9mIHRoZSBUaGluZ1NoYWRvdyBsb2NhbGx5XG4gICAgICovXG5cbiAgICByZWFkb25seSBzeW5jU2hhZG93OiBib29sZWFuLFxuXG4gICAgLyoqXG4gICAgICogT25lIG9mIHRoZSBjZXJ0aWZpY2F0ZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSB0aGluZyB0byBhdXRoZW50aWNhdGUgdG8gdGhlIGNsb3VkXG4gICAgICovXG4gICAgcmVhZG9ubHkgY2VydGlmaWNhdGVBcm46IHN0cmluZ1xufVxuXG5leHBvcnQgY2xhc3MgQ29yZSBleHRlbmRzIGNkay5SZXNvdXJjZSBpbXBsZW1lbnRzIElDb3JlIHtcbiAgICByZWFkb25seSB0aGluZzogQ2ZuVGhpbmc7XG4gICAgcmVhZG9ubHkgY2VydGlmaWNhdGVBcm46IHN0cmluZztcbiAgICBzeW5jU2hhZG93OiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IGNkay5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBDb3JlUHJvcHMpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcbiAgICAgICAgdGhpcy50aGluZyA9IHByb3BzLnRoaW5nXG4gICAgICAgIHRoaXMuY2VydGlmaWNhdGVBcm4gPSBwcm9wcy5jZXJ0aWZpY2F0ZUFyblxuICAgICAgICB0aGlzLnN5bmNTaGFkb3cgPSBwcm9wcy5zeW5jU2hhZG93XG4gICAgfVxuXG4gICAgcmVzb2x2ZSgpOiBnZy5DZm5Db3JlRGVmaW5pdGlvblZlcnNpb24uQ29yZVByb3BlcnR5IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNlcnRpZmljYXRlQXJuOiB0aGlzLmNlcnRpZmljYXRlQXJuLFxuICAgICAgICAgICAgc3luY1NoYWRvdzogdGhpcy5zeW5jU2hhZG93LFxuICAgICAgICAgICAgdGhpbmdBcm46IHRoaXMuc3RhY2suZm9ybWF0QXJuKHtcbiAgICAgICAgICAgICAgICBzZXJ2aWNlOiAnaW90JyxcbiAgICAgICAgICAgICAgICByZXNvdXJjZTogJ3RoaW5nJyxcbiAgICAgICAgICAgICAgICByZXNvdXJjZU5hbWU6IHRoaXMudGhpbmcudGhpbmdOYW1lXG4gICAgICAgICAgICB9KSwgLy9gYXJuOmF3czppb3Q6JHtwYXJlbnQucmVnaW9ufToke3BhcmVudC5hY2NvdW50fTp0aGluZy8ke3Byb3BzLmNvcmUudGhpbmcudGhpbmdOYW1lfWAsXG4gICAgICAgICAgICBpZDogJzAnXG4gICAgICAgIH1cbiAgICB9XG5cbn1cblxuIl19